@page "/app"
@inject Services.SignalRConnector Connector
<div class="container">
    <h1>SignalR testing tool! (Hub status: @Connector.Hub.State.ToString())</h1>
    <EditForm Model="@model" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="address">Method name</label>
            <InputText class="form-control" id="address" aria-describedby="addressHelp" placeholder="callGhost"
                @bind-Value="model.MethodName" />
        </div>
        <div class="form-group">
            <label for="address">Parameters</label>
            <InputTextArea class="form-control" id="address" aria-describedby="addressHelp"
                placeholder='{"id": 1, "name": "John Snow"}' @bind-Value="model.DataText" />
        </div>
        <small class="form-text text-success">@message</small>
        @if (error != null)
        {
            <Alert Message="@error.Message" Type="@AlertType.Error" Banner></Alert>
            <a href="" @onclick:preventDefault @onclick="SeeDetail">Details</a>
        }
        @if (seeDetail)
        {
            <Alert Message="@GetDetail()" Type="@AlertType.Error" Banner></Alert>
        }
        <Button HtmlType="submit" Type="primary">Invoke</Button>
    </EditForm>
    <Search Size="@InputSize.Large" Placeholder="onReceived" @bind-Value="methodListener" OnSearch="AddListener"
        EnterButton="@("Listen")" />
    <AntList Bordered DataSource="@items" Size="large" Class="my-2">
        <Header>Message received</Header>
        <ChildContent Context="item">
            <ListItem>
                <div class="d-flex flex-column">
                    <p>[@item.ReceivedTime]Method :<strong>(@item.Method)</strong></p>
                    <i>@item.Json</i>
                </div>
            </ListItem>
        </ChildContent>
    </AntList>
</div>
@code{
    public class LogItem
    {
        public string Method { get; set; }
        public string Json { get; set; }
        public DateTime ReceivedTime { get; set; }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Connector.OnReceive += Receive;
    }
    void Receive(string method, object arg)
    {
        items.Add(new LogItem
        {
            Method = method,
            Json = arg.ToString(),
            ReceivedTime = DateTime.Now
        });
        StateHasChanged();
    }
    IList<LogItem> items = new List<LogItem>();
    Models.Message model = new Models.Message();
    Exception error;
    string message;
    bool seeDetail;
    string methodListener;
    private Task OnClosed(Exception e)
    {
        error = e;
        return Task.CompletedTask;
    }
    private async Task SubmitAsync()
    {
        error = await Connector.Invoke(model);
        if (error == null)
        {
            message = "OK";
        }
        else
        {
            message = string.Empty;
        }
    }
    private void SeeDetail()
    {
        seeDetail = !seeDetail;
    }
    string GetDetail()
    {
        return error?.StackTrace;
    }
    void AddListener()
    {
        if (string.IsNullOrWhiteSpace(methodListener)) return;
        Connector.Listen(methodListener);
        methodListener = string.Empty;
        StateHasChanged();
    }
}